name: Publish to Itch.io

on:
 push:
  branches:
  - main
 pull_request:
  branches:
  - main

permissions:
  contents: write
  actions: write

env:
 BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }} # Needs to be added as a repository secret
 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 IS_MAIN: ${{ contains(github.ref, 'main') }}
 ITCH_USER: ${{ vars.ITCH_USER }} # Your itch.io username - needs to be added as a repository variable
 ITCH_GAME: ${{ vars.ITCH_GAME }} # Your game name on itch.io - needs to be added as a repository variable

jobs:
 Detect-Platforms:
  runs-on: ubuntu-latest
  outputs:
    matrix: ${{ steps.set-matrix.outputs.matrix }}
    has-platforms: ${{ steps.set-matrix.outputs.has-platforms }}
    godot-version: ${{ steps.detect-config.outputs.godot-version }}
    game-name: ${{ steps.detect-config.outputs.game-name }}
  steps:
  - uses: actions/checkout@v4
  
  - name: Detect Project Configuration
    id: detect-config
    run: |
      echo "Detecting project configuration from project.godot..."
      
      # Extract Godot version from project.godot
      GODOT_MAJOR=$(grep -o 'config/features=.*"[0-9]\+\.[0-9]\+' project.godot | grep -o '[0-9]\+\.[0-9]\+' || echo "4.5")
      GODOT_VERSION="${GODOT_MAJOR}-stable"
      
      # Extract game name from project.godot (fallback to repo name)
      GAME_NAME=$(grep 'config/name=' project.godot | sed 's/config\/name="\(.*\)"/\1/' | tr ' ' '-' | tr '[:upper:]' '[:lower:]' || echo "godot-game")
      
      echo "godot-version=$GODOT_VERSION" >> $GITHUB_OUTPUT
      echo "game-name=$GAME_NAME" >> $GITHUB_OUTPUT
      
      echo "Detected configuration:"
      echo "  Godot Version: $GODOT_VERSION"
      echo "  Game Name: $GAME_NAME"
  
  - name: Detect Export Presets & Set Matrix
    id: set-matrix
    run: |
      echo "Detecting configured export presets..."
      
      # Get game name from previous step
      GAME_NAME="${{ steps.detect-config.outputs.game-name }}"
      
      # Define platform configurations
      declare -A platforms=(
        ["windows"]="Windows Desktop|windows|${GAME_NAME}.exe"
        ["linux"]="Linux|linux|${GAME_NAME}.x86_64"
        ["web"]="Web|web|index.html"
        ["macos"]="macOS|macos|${GAME_NAME}.app"
      )
      
      # Build matrix array
      matrix_include="["
      platform_count=0
      
      for platform in "${!platforms[@]}"; do
        IFS='|' read -ra PLATFORM_INFO <<< "${platforms[$platform]}"
        preset_name="${PLATFORM_INFO[0]}"
        folder_name="${PLATFORM_INFO[1]}"
        file_name="${PLATFORM_INFO[2]}"
        
        # Check if preset exists
        if grep -q "platform=\"$preset_name\"" export_presets.cfg; then
          echo "✅ Found preset for $platform ($preset_name)"
          
          if [ $platform_count -gt 0 ]; then
            matrix_include+=","
          fi
          
          matrix_include+="{\"platform\":\"$platform\",\"preset\":\"$preset_name\",\"folder\":\"$folder_name\",\"file\":\"$file_name\"}"
          ((platform_count++))
        else
          echo "❌ No preset found for $platform ($preset_name)"
        fi
      done
      
      matrix_include+="]"
      
      if [ $platform_count -eq 0 ]; then
        echo "No export presets found!"
        echo "has-platforms=false" >> $GITHUB_OUTPUT
        echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
      else
        echo "Found $platform_count platform(s) to export"
        echo "has-platforms=true" >> $GITHUB_OUTPUT
        echo "matrix={\"include\":$matrix_include}" >> $GITHUB_OUTPUT
      fi
      
      echo "Matrix: {\"include\":$matrix_include}"

 Export:
  needs: Detect-Platforms
  if: needs.Detect-Platforms.outputs.has-platforms == 'true'
  runs-on: ubuntu-latest
  strategy:
    matrix: ${{ fromJson(needs.Detect-Platforms.outputs.matrix) }}
    fail-fast: false  # Continue other exports even if one fails
  steps:
  - uses: actions/checkout@v4
  
  # Cache Godot engine and templates
  - name: Cache Godot
    uses: actions/cache@v4
    id: cache-godot
    with:
      path: |
        godot
        ~/.local/share/godot/export_templates
      key: godot-${{ needs.Detect-Platforms.outputs.godot-version }}
  
  - name: Setup Godot
    if: steps.cache-godot.outputs.cache-hit != 'true'
    run: |
       GODOT_VERSION="${{ needs.Detect-Platforms.outputs.godot-version }}"
       echo "Downloading Godot $GODOT_VERSION..."
       curl -L -o godot.zip "https://github.com/godotengine/godot/releases/download/$GODOT_VERSION/Godot_v${GODOT_VERSION}_linux.x86_64.zip"
       unzip godot.zip
       mv "Godot_v${GODOT_VERSION}_linux.x86_64" godot
       chmod +x godot
       
       echo "Downloading export templates..."
       curl -L -o export_templates.zip "https://github.com/godotengine/godot/releases/download/$GODOT_VERSION/Godot_v${GODOT_VERSION}_export_templates.tpz"
       unzip export_templates.zip
       
       mkdir -p ~/.local/share/godot/export_templates/$GODOT_VERSION
       mv ./templates/* ~/.local/share/godot/export_templates/$GODOT_VERSION/

  - name: Export ${{ matrix.platform }}
    run: |
      mkdir -p ./exports/${{ matrix.folder }}
      echo "Exporting ${{ matrix.platform }} build..."
      
      ./godot --headless --path ./ --export-release "${{ matrix.preset }}" "./exports/${{ matrix.folder }}/${{ matrix.file }}"
      
      # Verify export
      if [ "${{ matrix.platform }}" == "macos" ]; then
        # macOS exports as .app directory
        if [ ! -d "./exports/${{ matrix.folder }}/${{ matrix.file }}" ]; then
          echo "❌ ${{ matrix.platform }} export failed"
          exit 1
        fi
      else
        # Other platforms export as files
        if [ ! -f "./exports/${{ matrix.folder }}/${{ matrix.file }}" ]; then
          echo "❌ ${{ matrix.platform }} export failed"
          exit 1
        fi
      fi
      
      echo "✅ ${{ matrix.platform }} export completed successfully"
      ls -la "./exports/${{ matrix.folder }}/"
  
  - name: Upload ${{ matrix.platform }} Export
    uses: actions/upload-artifact@v4
    with:
     name: export-${{ matrix.platform }}
     path: exports/${{ matrix.folder }}
  
 Release:
  needs: [Detect-Platforms, Export]
  if: ${{ contains(github.ref, 'main') && needs.Detect-Platforms.outputs.has-platforms == 'true' }}
  runs-on: ubuntu-latest
  outputs:
    release-tag: ${{ steps.tag_version.outputs.new_tag }}
    release-url: ${{ steps.create_release.outputs.upload_url }}
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for proper tag generation
   
    - name: Version
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
       github_token: ${{ secrets.GITHUB_TOKEN }}
       default_bump: patch
       tag_prefix: "v"
    
    - name: Verify Tag Creation
      if: ${{ !steps.tag_version.outputs.new_tag }}
      run: |
        echo "No new tag was created. This might happen if:"
        echo "1. No commits since last tag"
        echo "2. Commit messages don't trigger version bump"
        echo "3. Tag already exists"
        exit 1
    
    - name: Download All Exports
      uses: actions/download-artifact@v4
      with:
        pattern: export-*
        path: exports
        merge-multiple: true
    
    - name: Create Platform Zips
      run: |
        echo "Creating platform-specific ZIP files..."
        echo "Available exports:"
        ls -la exports/ || echo "No exports directory found"
        
        # Create ZIP for each available platform
        GAME_NAME="${{ needs.Detect-Platforms.outputs.game-name }}"
        for platform_dir in exports/*/; do
          if [ -d "$platform_dir" ]; then
            platform_name=$(basename "$platform_dir")
            echo "Creating ZIP for $platform_name..."
            cd "$platform_dir" && zip -r "../../${GAME_NAME}-$platform_name-${{ steps.tag_version.outputs.new_tag }}.zip" . && cd ../..
          fi
        done
        
        # Verify ZIP files
        echo "Created ZIP files:"
        ls -lh *.zip 2>/dev/null || echo "No ZIP files created"
        
        # Test ZIP integrity
        for zip_file in *.zip; do
          if [ -f "$zip_file" ]; then
            echo "Testing $zip_file..."
            unzip -t "$zip_file"
          fi
        done

    - name: Create Github Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       tag_name: ${{ steps.tag_version.outputs.new_tag }}
       name: Release ${{ steps.tag_version.outputs.new_tag }}
       body: ${{ steps.tag_version.outputs.changelog }}
       files: |
         ${{ needs.Detect-Platforms.outputs.game-name }}-*-${{ steps.tag_version.outputs.new_tag }}.zip
 
 Publish:
  needs: [Detect-Platforms, Release]
  if: ${{ contains(github.ref, 'main') && needs.Release.outputs.release-tag && needs.Detect-Platforms.outputs.has-platforms == 'true' }}
  runs-on: ubuntu-latest
  strategy:
    matrix: ${{ fromJson(needs.Detect-Platforms.outputs.matrix) }}
    fail-fast: false  # Continue publishing other platforms even if one fails
  steps:
    - name: Download ${{ matrix.platform }} Export
      uses: actions/download-artifact@v4
      with:
        name: export-${{ matrix.platform }}
        path: exports/${{ matrix.folder }}
    
    - name: Cache Butler
      uses: actions/cache@v4
      id: cache-butler
      with:
        path: butler
        key: butler-latest
    
    - name: Download + Setup Butler
      if: steps.cache-butler.outputs.cache-hit != 'true'
      run: |
       echo "Downloading Butler..."
       curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
       unzip butler.zip
       chmod +x butler
    
    - name: Verify Butler
      run: |
        ./butler -V
        echo "Butler version verified"
    
    - name: Login To Butler
      run: ./butler login
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
    
    - name: Push ${{ matrix.platform }} Build to Itch.io
      run: |
        echo "Pushing ${{ matrix.platform }} build..."
        ./butler push exports/${{ matrix.folder }} ${{ env.ITCH_USER }}/${{ env.ITCH_GAME }}:${{ matrix.platform }} --userversion ${{ needs.Release.outputs.release-tag }}
        echo "${{ matrix.platform }} build pushed successfully"
    

 Notify:
  needs: [Detect-Platforms, Export, Release, Publish]
  if: always() && contains(github.ref, 'main')
  runs-on: ubuntu-latest
  steps:
    - name: Notify Success
      if: ${{ needs.Export.result == 'success' && needs.Release.result == 'success' && needs.Publish.result == 'success' }}
      run: |
        echo "🎉 Deployment successful!"
        echo "Release: ${{ needs.Release.outputs.release-tag }}"
        echo "All configured platforms have been published to itch.io!"
    
    - name: Notify Failure
      if: ${{ needs.Export.result == 'failure' || needs.Release.result == 'failure' || needs.Publish.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        echo "Detect-Platforms: ${{ needs.Detect-Platforms.result }}"
        echo "Export: ${{ needs.Export.result }}"
        echo "Release: ${{ needs.Release.result }}"
        echo "Publish: ${{ needs.Publish.result }}"

 Cleanup:
  needs: [Detect-Platforms, Export, Release, Publish, Notify]
  if: always()
  runs-on: ubuntu-latest
  steps:
    - uses: geekyeggo/delete-artifact@v5
      with:
       name: |
         export-*