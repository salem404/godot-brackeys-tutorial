name: Test Builds

on:
 push:
  branches:
  - main
  - develop
  paths-ignore:
    - '.github/**'
    - '.vscode/**'
    - '.gitignore'
    - '.gitattributes'
    - '*.md'
    - 'LICENSE'
    - 'README*'
    - 'CHANGELOG*'
    - 'docs/**'
 pull_request:
  branches:
  - main
  paths-ignore:
    - '.github/**'
    - '.vscode/**'
    - '.gitignore'
    - '.gitattributes'
    - '*.md'
    - 'LICENSE'
    - 'README*'
    - 'CHANGELOG*'
    - 'docs/**'

permissions:
  contents: read
  pull-requests: write

env:
 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
 Detect-Platforms:
  runs-on: ubuntu-latest
  outputs:
    matrix: ${{ steps.set-matrix.outputs.matrix }}
    has-platforms: ${{ steps.set-matrix.outputs.has-platforms }}
    godot-version: ${{ steps.detect-config.outputs.godot-version }}
    game-name: ${{ steps.detect-config.outputs.game-name }}
  steps:
  - uses: actions/checkout@v4
  
  - name: Detect Project Configuration
    id: detect-config
    shell: bash
    run: |
      echo "Detecting project configuration from project.godot..."
      
      # Extract Godot version from project.godot
      GODOT_VERSION=$(grep 'config/features' project.godot | grep -o '[0-9]\+\.[0-9]\+' | head -n 1)
      
      if [ -z "$GODOT_VERSION" ]; then
        echo "❌ ERROR: Could not detect Godot version from project.godot"
        exit 1
      fi
      
      # Extract game name from project.godot
      GAME_NAME=$(grep 'config/name=' project.godot | sed 's/config\/name="\(.*\)"/\1/' | tr ' ' '-' | tr '[:upper:]' '[:lower:]' || echo "godot-game")
      
      echo "godot-version=$GODOT_VERSION" >> $GITHUB_OUTPUT
      echo "game-name=$GAME_NAME" >> $GITHUB_OUTPUT
      
      echo "Detected configuration:"
      echo "  Godot Version: $GODOT_VERSION"
      echo "  Game Name: $GAME_NAME"
  
  - name: Detect Export Presets & Set Matrix
    id: set-matrix
    shell: bash
    run: |
      echo "Detecting configured export presets..."
      
      GAME_NAME="${{ steps.detect-config.outputs.game-name }}"
      
      declare -A platforms=(
        ["windows"]="Windows Desktop|windows|${GAME_NAME}.exe"
        ["linux"]="Linux|linux|${GAME_NAME}.x86_64"
        ["web"]="Web|web|index.html"
        ["macos"]="macOS|macos|${GAME_NAME}.app"
      )
      
      matrix_include="["
      platform_count=0
      
      for platform in "${!platforms[@]}"; do
        IFS='|' read -ra PLATFORM_INFO <<< "${platforms[$platform]}"
        preset_name="${PLATFORM_INFO[0]}"
        folder_name="${PLATFORM_INFO[1]}"
        file_name="${PLATFORM_INFO[2]}"
        
        if grep -q "platform=\"$preset_name\"" export_presets.cfg; then
          echo "✅ Found preset for $platform ($preset_name)"
          
          if [ $platform_count -gt 0 ]; then
            matrix_include+=","
          fi
          
          matrix_include+="{\"platform\":\"$platform\",\"preset\":\"$preset_name\",\"folder\":\"$folder_name\",\"file\":\"$file_name\"}"
          platform_count=$((platform_count + 1))
        else
          echo "❌ No preset found for $platform ($preset_name)"
        fi
      done
      
      matrix_include+="]"
      
      if [ $platform_count -eq 0 ]; then
        echo "No export presets found!"
        echo "has-platforms=false" >> $GITHUB_OUTPUT
        echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
      else
        echo "Found $platform_count platform(s) to export"
        echo "has-platforms=true" >> $GITHUB_OUTPUT
        echo "matrix={\"include\":$matrix_include}" >> $GITHUB_OUTPUT
      fi
      
      echo "Matrix: {\"include\":$matrix_include}"

 Test-Export:
  needs: Detect-Platforms
  if: needs.Detect-Platforms.outputs.has-platforms == 'true'
  runs-on: ubuntu-latest
  strategy:
    matrix: ${{ fromJson(needs.Detect-Platforms.outputs.matrix) }}
    fail-fast: false
  steps:
  - uses: actions/checkout@v4
  
  - name: Cache Godot
    uses: actions/cache@v4
    id: cache-godot
    with:
      path: |
        godot
        ~/.local/share/godot/export_templates
      key: godot-${{ needs.Detect-Platforms.outputs.godot-version }}-stable
  
  - name: Setup Godot
    if: steps.cache-godot.outputs.cache-hit != 'true'
    shell: bash
    run: |
       GODOT_VERSION="${{ needs.Detect-Platforms.outputs.godot-version }}"
       echo "Setting up Godot $GODOT_VERSION..."
       
       GODOT_URL="https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip"
       echo "URL: $GODOT_URL"
       
       if ! curl -f -L -o godot.zip "$GODOT_URL"; then
         echo "❌ ERROR: Failed to download Godot $GODOT_VERSION from GitHub"
         exit 1
       fi
       
       unzip -q godot.zip
       mv "Godot_v${GODOT_VERSION}-stable_linux.x86_64" godot
       chmod +x godot
       ./godot --version
       
       TEMPLATES_URL="https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz"
       echo "URL: $TEMPLATES_URL"
       
       if ! curl -f -L -o export_templates.tpz "$TEMPLATES_URL"; then
         echo "❌ ERROR: Failed to download export templates for Godot $GODOT_VERSION"
         exit 1
       fi
       
       unzip -q export_templates.tpz
       mkdir -p ~/.local/share/godot/export_templates/$GODOT_VERSION.stable
       mv ./templates/* ~/.local/share/godot/export_templates/$GODOT_VERSION.stable/
       
       echo "✅ Successfully installed Godot $GODOT_VERSION and export templates"

  - name: Test Export ${{ matrix.platform }}
    shell: bash
    run: |
      mkdir -p ./exports/${{ matrix.folder }}
      echo "Testing ${{ matrix.platform }} export..."
      
      ./godot --headless --path ./ --export-release "${{ matrix.preset }}" "./exports/${{ matrix.folder }}/${{ matrix.file }}"
      
      # Verify export
      if [ "${{ matrix.platform }}" == "macos" ]; then
        if [ ! -d "./exports/${{ matrix.folder }}/${{ matrix.file }}" ]; then
          echo "❌ ${{ matrix.platform }} export failed"
          exit 1
        fi
      else
        if [ ! -f "./exports/${{ matrix.folder }}/${{ matrix.file }}" ]; then
          echo "❌ ${{ matrix.platform }} export failed"
          exit 1
        fi
      fi
      
      echo "✅ ${{ matrix.platform }} export completed successfully"
      ls -la "./exports/${{ matrix.folder }}/"
  
  - name: Upload ${{ matrix.platform }} Test Build
    uses: actions/upload-artifact@v4
    with:
     name: export-${{ matrix.platform }}
     path: exports/${{ matrix.folder }}
     retention-days: 30  # Kept for 30 days so releases can reuse them

 Preview-Release:
  needs: [Detect-Platforms, Test-Export]
  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog
    
    - name: Generate Preview Release Notes
      id: preview
      uses: mathieudutour/github-tag-action@v6.2
      with:
       github_token: ${{ secrets.GITHUB_TOKEN }}
       dry_run: true  # Don't actually create tag, just preview
       default_bump: false
       release_branches: main
    
    - name: Show Preview Release Info
      shell: bash
      run: |
        echo "## 📦 Release Preview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If you trigger a release now, this is what will be created:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ steps.preview.outputs.new_tag }}" ]; then
          echo "### 🏷️ Version Tag" >> $GITHUB_STEP_SUMMARY
          echo "\`${{ steps.preview.outputs.new_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Changelog" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.preview.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Platforms Ready" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All exports tested successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "To create this release, go to:" >> $GITHUB_STEP_SUMMARY
          echo "**Actions** → **Release to GitHub & Itch.io** → **Run workflow**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **No version bump detected**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Make sure your commit messages follow conventional commits:" >> $GITHUB_STEP_SUMMARY
          echo "- \`feat:\` for new features (minor version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`fix:\` for bug fixes (patch version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`BREAKING CHANGE:\` for breaking changes (major version bump)" >> $GITHUB_STEP_SUMMARY
        fi

 Test-Summary:
  needs: [Detect-Platforms, Test-Export]
  if: always()
  runs-on: ubuntu-latest
  steps:
    - name: Test Results Summary
      shell: bash
      run: |
        echo "## 🧪 Test Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.Test-Export.result }}" == "success" ]; then
          echo "✅ **All platform exports successful!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "These builds are ready to release and will be kept for 30 days." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Ready to Release?" >> $GITHUB_STEP_SUMMARY
          echo "Go to: **Actions** → **Release to GitHub & Itch.io** → **Run workflow**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some exports failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please fix the issues before releasing." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "Build artifacts available for 30 days (automatically used by releases)" >> $GITHUB_STEP_SUMMARY
